{"version":3,"sources":["../src/wechat.js"],"names":["debug","isStandardBrowserEnv","process","on","console","log","err","Wechat","data","_","extend","EventEmitter","state","CONF","STATE","init","contacts","Contact","Message","lastSyncTime","syncPollingId","syncErrorCount","checkPollingId","retryPollingId","msg","toUserName","sendText","emoticonMd5","sendEmoticon","uploadMedia","file","filename","then","res","ext","sendPic","mediaId","sendVideo","sendDoc","name","size","id","login","syncCheck","selector","SYNCCHECK_SELECTOR_NORMAL","sync","handleSync","Date","now","syncPolling","catch","AlreadyLogoutError","restart","emit","Error","clearTimeout","setTimeout","Seq","getContact","MemberList","_getContact","concat","_contacts","emptyGroup","filter","contact","UserName","startsWith","MemberCount","length","batchGetContact","updateContacts","ContactList","notifyMobile","checkPolling","userId","undefined","getmpData","i","MPArticleList","checkLogin","code","userAvatar","getUUID","uuid","redirect_uri","_login","_init","stop","response","Promise","resolve","logout","interval","sendMsg","_getPollingMessage","_getPollingTarget","_getPollingInterval","AddMsgCount","handleMsg","AddMsgList","ModContactCount","ModContactList","forEach","FromUserName","MsgType","MSGTYPE_STATUSNOTIFY","userList","StatusNotifyUserName","split","map","all","chunk","list","ToUserName","Content","test","oldContact","Object","assign","toLocaleString","func","members","key","member","push","username","nickname","getDisplayName","py","avatar","AvatarUrl","WechatCore","exports","module"],"mappings":"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","file":"wechat.js","sourcesContent":["import _debug from 'debug'\r\nimport EventEmitter from 'events'\r\nimport _ from 'lodash'\r\n\r\nimport WechatCore, { AlreadyLogoutError } from './core'\r\nimport ContactFactory from './interface/contact'\r\nimport MessageFactory from './interface/message'\r\nimport { getCONF, isStandardBrowserEnv } from './util'\r\n\r\nconst debug = _debug('wechat')\r\n\r\nif (!isStandardBrowserEnv) {\r\n  process.on('uncaughtException', err => {\r\n    console.log('uncaughtException', err)\r\n  })\r\n}\r\n\r\nclass Wechat extends WechatCore {\r\n  constructor (data) {\r\n    super(data)\r\n    _.extend(this, new EventEmitter())\r\n    this.state = this.CONF.STATE.init\r\n    this.contacts = {} // 所有联系人\r\n    this.Contact = ContactFactory(this)\r\n    this.Message = MessageFactory(this)\r\n    this.lastSyncTime = 0\r\n    this.syncPollingId = 0\r\n    this.syncErrorCount = 0\r\n    this.checkPollingId = 0\r\n    this.retryPollingId = 0\r\n  }\r\n\r\n  get friendList () {\r\n    let members = []\r\n\r\n    for (let key in this.contacts) {\r\n      let member = this.contacts[key]\r\n      members.push({\r\n        username: member['UserName'],\r\n        nickname: this.Contact.getDisplayName(member),\r\n        py: member['RemarkPYQuanPin'] ? member['RemarkPYQuanPin'] : member['PYQuanPin'],\r\n        avatar: member.AvatarUrl\r\n      })\r\n    }\r\n\r\n    return members\r\n  }\r\n\r\n  sendMsg (msg, toUserName) {\r\n    if (typeof msg !== 'object') {\r\n      return this.sendText(msg, toUserName)\r\n    } else if (msg.emoticonMd5) {\r\n      return this.sendEmoticon(msg.emoticonMd5, toUserName)\r\n    } else {\r\n      return this.uploadMedia(msg.file, msg.filename, toUserName)\r\n        .then(res => {\r\n          switch (res.ext) {\r\n            case 'bmp':\r\n            case 'jpeg':\r\n            case 'jpg':\r\n            case 'png':\r\n              return this.sendPic(res.mediaId, toUserName)\r\n            case 'gif':\r\n              return this.sendEmoticon(res.mediaId, toUserName)\r\n            case 'mp4':\r\n              return this.sendVideo(res.mediaId, toUserName)\r\n            default:\r\n              return this.sendDoc(res.mediaId, res.name, res.size, res.ext, toUserName)\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  syncPolling (id = ++this.syncPollingId) {\r\n    if (this.state !== this.CONF.STATE.login || this.syncPollingId !== id) {\r\n      return\r\n    }\r\n    this.syncCheck().then(selector => {\r\n      debug('Sync Check Selector: ', selector)\r\n      if (+selector !== this.CONF.SYNCCHECK_SELECTOR_NORMAL) {\r\n        return this.sync().then(data => {\r\n          this.syncErrorCount = 0\r\n          this.handleSync(data)\r\n        })\r\n      }\r\n    }).then(() => {\r\n      this.lastSyncTime = Date.now()\r\n      this.syncPolling(id)\r\n    }).catch(err => {\r\n      if (this.state !== this.CONF.STATE.login) {\r\n        return\r\n      }\r\n      debug(err)\r\n      if (err instanceof AlreadyLogoutError) {\r\n        // console.log('already-lou')\r\n        // console.log('err, stop')\r\n        // this.stop()\r\n        this.restart()\r\n        return\r\n      }\r\n      this.emit('error', err)\r\n      if (++this.syncErrorCount > 2) {\r\n        let err = new Error(`连续${this.syncErrorCount}次同步失败，5s后尝试重启`)\r\n        debug(err)\r\n        this.emit('error', err)\r\n        clearTimeout(this.retryPollingId)\r\n        setTimeout(() => this.restart(), 5 * 1000)\r\n      } else {\r\n        clearTimeout(this.retryPollingId)\r\n        this.retryPollingId = setTimeout(() => this.syncPolling(id), 2000 * this.syncErrorCount)\r\n      }\r\n    })\r\n  }\r\n\r\n  _getContact (Seq = 0) {\r\n    let contacts = []\r\n    return this.getContact(Seq)\r\n      .then(res => {\r\n        contacts = res.MemberList || []\r\n        if (res.Seq) {\r\n          return this._getContact(res.Seq)\r\n            .then(_contacts => contacts = contacts.concat(_contacts || []))\r\n        }\r\n      })\r\n      .then(() => {\r\n        if (Seq == 0) {\r\n          let emptyGroup =\r\n            contacts.filter(contact => contact.UserName.startsWith('@@') && contact.MemberCount == 0)\r\n          if (emptyGroup.length != 0) {\r\n            return this.batchGetContact(emptyGroup)\r\n              .then(_contacts => contacts = contacts.concat(_contacts || []))\r\n          } else {\r\n            return contacts\r\n          }\r\n        } else {\r\n          return contacts\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.emit('error', err)\r\n        return contacts\r\n      })\r\n  }\r\n\r\n  _init () {\r\n    return this.init()\r\n      .then(data => {\r\n        // this.getContact() 这个接口返回通讯录中的联系人（包括已保存的群聊）\r\n        // 临时的群聊会话在初始化的接口中可以获取，因此这里也需要更新一遍 contacts\r\n        // 否则后面可能会拿不到某个临时群聊的信息\r\n        this.updateContacts(data.ContactList)\r\n\r\n        this.notifyMobile()\r\n          .catch(err => this.emit('error', err))\r\n        this._getContact()\r\n          .then(contacts => {\r\n            debug('getContact count: ', contacts.length)\r\n            this.updateContacts(contacts)\r\n          })\r\n        this.emit('init', data)\r\n        this.state = this.CONF.STATE.login\r\n        this.lastSyncTime = Date.now()\r\n        this.syncPolling()\r\n        this.checkPolling()\r\n        this.emit('login')\r\n      })\r\n  }\r\n\r\n  _getmpData (userId = undefined) {\r\n    return this.getmpData()\r\n      .then(data => {\r\n        for (let i of data) {\r\n          // UserName\r\n          // nickName\r\n          if (userId === i.UserName) {\r\n            return i.MPArticleList\r\n            /* for (let i2 of i.MPArticleList) {\r\n              console.log(i2, '小的object')\r\n              // 字段 Title\r\n              // Digest\r\n              // Cover\r\n              // Url\r\n            } */\r\n          }\r\n        }\r\n        console.log('获取mp信息')\r\n      })\r\n  }\r\n\r\n  _login () {\r\n    const checkLogin = () => {\r\n      return this.checkLogin()\r\n        .then(res => {\r\n          if (res.code === 201 && res.userAvatar) {\r\n            this.emit('user-avatar', res.userAvatar)\r\n          }\r\n          if (res.code !== 200) {\r\n            debug('checkLogin: ', res.code)\r\n            return checkLogin()\r\n          } else {\r\n            return res\r\n          }\r\n        })\r\n    }\r\n    return this.getUUID()\r\n      .then(uuid => {\r\n        debug('getUUID: ', uuid)\r\n        this.emit('uuid', uuid)\r\n        this.state = this.CONF.STATE.uuid\r\n        return checkLogin()\r\n      })\r\n      .then(res => {\r\n        debug('checkLogin: ', res.redirect_uri)\r\n        return this.login()\r\n      })\r\n  }\r\n\r\n  start () {\r\n    debug('启动中...')\r\n    return this._login()\r\n      .then(() => this._init())\r\n      .catch(err => {\r\n        debug(err)\r\n        this.emit('error', err)\r\n        console.log('err 改账号不允许微信登陆，请更换账号')\r\n        this.stop()\r\n      })\r\n  }\r\n\r\n  restart () {\r\n    debug('重启中...')\r\n    return this._init()\r\n      .catch(err => {\r\n        if (err instanceof AlreadyLogoutError) {\r\n          this.emit('logout')\r\n          return\r\n        }\r\n        if (err.response) {\r\n          throw err\r\n        } else {\r\n          let err = new Error('重启时网络错误，60s后进行最后一次重启')\r\n          debug(err)\r\n          this.emit('error', err)\r\n          return new Promise(resolve => {\r\n            setTimeout(resolve, 60 * 1000)\r\n          }).then(() => this.init())\r\n            .then(data => {\r\n              this.updateContacts(data.ContactList)\r\n            })\r\n        }\r\n      }).catch(err => {\r\n        debug(err)\r\n        this.emit('error', err)\r\n        this.stop()\r\n      })\r\n  }\r\n\r\n  stop () {\r\n    debug('登出中...')\r\n    clearTimeout(this.retryPollingId)\r\n    clearTimeout(this.checkPollingId)\r\n    this.logout()\r\n    this.state = this.CONF.STATE.logout\r\n    this.emit('logout')\r\n  }\r\n\r\n  checkPolling () {\r\n    console.log('check')\r\n    if (this.state !== this.CONF.STATE.login) {\r\n      return\r\n    }\r\n    let interval = Date.now() - this.lastSyncTime\r\n    if (interval > 15 * 60 * 1000) {\r\n      let err = new Error(`状态同步超过${interval / 1000}s未响应，5s后尝试重启`)\r\n      debug(err)\r\n      this.emit('error', err)\r\n      clearTimeout(this.checkPollingId)\r\n      setTimeout(() => this.restart(), 5 * 1000)\r\n    } else {\r\n      debug('心跳')\r\n      this.notifyMobile()\r\n        .catch(err => {\r\n          debug(err)\r\n          this.emit('error', err)\r\n        })\r\n      this.sendMsg(this._getPollingMessage(), this._getPollingTarget())\r\n        .catch(err => {\r\n          debug(err)\r\n          this.emit('error', err)\r\n        })\r\n      clearTimeout(this.checkPollingId)\r\n      this.checkPollingId = setTimeout(() => this.checkPolling(), this._getPollingInterval())\r\n    }\r\n  }\r\n\r\n  handleSync (data) {\r\n    if (!data) {\r\n      this.restart()\r\n      return\r\n    }\r\n    if (data.AddMsgCount) {\r\n      debug('syncPolling messages count: ', data.AddMsgCount)\r\n      this.handleMsg(data.AddMsgList)\r\n    }\r\n    if (data.ModContactCount) {\r\n      debug('syncPolling ModContactList count: ', data.ModContactCount)\r\n      this.updateContacts(data.ModContactList)\r\n    }\r\n  }\r\n\r\n  handleMsg (data) {\r\n    data.forEach(msg => {\r\n      Promise.resolve().then(() => {\r\n        if (!this.contacts[msg.FromUserName] ||\r\n          (msg.FromUserName.startsWith('@@') && this.contacts[msg.FromUserName].MemberCount == 0)) {\r\n          return this.batchGetContact([{\r\n            UserName: msg.FromUserName\r\n          }]).then(contacts => {\r\n            this.updateContacts(contacts)\r\n          }).catch(err => {\r\n            debug(err)\r\n            this.emit('error', err)\r\n          })\r\n        }\r\n      }).then(() => {\r\n        msg = this.Message.extend(msg)\r\n        this.emit('message', msg)\r\n        return\r\n        if (msg.MsgType === this.CONF.MSGTYPE_STATUSNOTIFY) {\r\n          let userList = msg.StatusNotifyUserName.split(',').filter(UserName => !this.contacts[UserName])\r\n            .map(UserName => {\r\n              return {\r\n                UserName: UserName\r\n              }\r\n            })\r\n          Promise.all(_.chunk(userList, 50).map(list => {\r\n            return this.batchGetContact(list).then(res => {\r\n              debug('batchGetContact data length: ', res.length)\r\n              this.updateContacts(res)\r\n            })\r\n          })).catch(err => {\r\n            debug(err)\r\n            this.emit('error', err)\r\n          })\r\n        }\r\n        if (msg.ToUserName === 'filehelper' && msg.Content === '退出wechat' ||\r\n          /^(.\\udf1a\\u0020\\ud83c.){3}$/.test(msg.Content)) {\r\n          console.log('触发 stop')\r\n          // this.stop()\r\n        }\r\n      }).catch(err => {\r\n        this.emit('error', err)\r\n        debug(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  updateContacts (contacts) {\r\n    if (!contacts || contacts.length == 0) {\r\n      return\r\n    }\r\n    contacts.forEach(contact => {\r\n      if (this.contacts[contact.UserName]) {\r\n        let oldContact = this.contacts[contact.UserName]\r\n        // 清除无效的字段\r\n        for (let i in contact) {\r\n          contact[i] || delete contact[i]\r\n        }\r\n        Object.assign(oldContact, contact)\r\n        this.Contact.extend(oldContact)\r\n      } else {\r\n        this.contacts[contact.UserName] = this.Contact.extend(contact)\r\n      }\r\n    })\r\n    this.emit('contacts-updated', contacts)\r\n  }\r\n\r\n  _getPollingMessage () { // Default polling message\r\n    return '心跳：' + new Date().toLocaleString()\r\n  }\r\n\r\n  _getPollingInterval () { // Default polling interval\r\n    return 5 * 60 * 1000\r\n  }\r\n\r\n  _getPollingTarget () { // Default polling target user\r\n    return 'filehelper'\r\n  }\r\n\r\n  setPollingMessageGetter (func) {\r\n    if (typeof (func) !== 'function') return\r\n    if (typeof (func()) !== 'string') return\r\n    this._getPollingMessage = func\r\n  }\r\n\r\n  setPollingIntervalGetter (func) {\r\n    if (typeof (func) !== 'function') return\r\n    if (typeof (func()) !== 'number') return\r\n    this._getPollingInterval = func\r\n  }\r\n\r\n  setPollingTargetGetter (func) {\r\n    if (typeof (func) !== 'function') return\r\n    if (typeof (func()) !== 'string') return\r\n    this._getPollingTarget = func\r\n  }\r\n}\r\n\r\nWechat.STATE = getCONF().STATE\r\n\r\nexports = module.exports = Wechat\r\n"]}